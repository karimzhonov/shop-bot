
import logging
import os

import bot.filters as filters
import bot.handlers as handlers
from aiogram import executor, types
from aiogram.types import ReplyKeyboardRemove
from bot import config
from bot.handlers.user.menu import get_menu
from bot.loader import bot, dp
from bot.models import User
from django.core.management import BaseCommand

filters.setup(dp)

WEBAPP_HOST = "0.0.0.0"
WEBAPP_PORT = int(os.environ.get("PORT", 5000))


@dp.message_handler(commands='start')
async def cmd_start(message: types.Message):
    await User.objects.aupdate_or_create({
        "id": message.from_user.id, 
        "username": message.from_user.username, 
        "last_name": message.from_user.last_name,
        "first_name": message.from_user.first_name,
    }, id=message.from_user.id)

    markup = await get_menu(message)

    await message.answer('''–ü—Ä–∏–≤–µ—Ç! üëã

ü§ñ –Ø –±–æ—Ç-–º–∞–≥–∞–∑–∏–Ω –ø–æ –ø–æ–¥–∞–∂–µ —Ç–æ–≤–∞—Ä–æ–≤ –ª—é–±–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.
    
üõçÔ∏è –ß—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞—Ç–∞–ª–æ–≥ –∏ –≤—ã–±—Ä–∞—Ç—å –ø—Ä–∏–≥–ª—è–Ω—É–≤—à–∏–µ—Å—è —Ç–æ–≤–∞—Ä—ã –≤–æ–∑–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /menu.

‚ùì –í–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã? –ù–µ –ø—Ä–æ–±–ª–µ–º–∞! –ö–æ–º–∞–Ω–¥–∞ /sos –ø–æ–º–æ–∂–µ—Ç —Å–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∞–º–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ—Å—Ç–∞—Ä–∞—é—Ç—Å—è –∫–∞–∫ –º–æ–∂–Ω–æ –±—ã—Å—Ç—Ä–µ–µ –æ—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è.

ü§ù –ó–∞–∫–∞–∑–∞—Ç—å –ø–æ—Ö–æ–∂–µ–≥–æ –±–æ—Ç–∞? –°–≤—è–∂–∏—Ç–µ—Å—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º <a href="https://t.me/khtkarimzhonov">–ö–∞—Ä–∏–º–∂–æ–Ω–æ–≤ –•—É—Å–Ω–∏–¥–¥–∏–Ω</a>, –æ–Ω –Ω–µ –∫—É—Å–∞–µ—Ç—Å—è)))
    ''', reply_markup=markup)


async def on_startup(dp):
    logging.basicConfig(level=logging.INFO)

    await bot.delete_webhook()
    await bot.set_webhook(config.WEBHOOK_URL)


async def on_shutdown():
    logging.warning("Shutting down..")
    await bot.delete_webhook()
    await dp.storage.close()
    await dp.storage.wait_closed()
    logging.warning("Bot down")


class Command(BaseCommand):
    def handle(self, *args, **options):
        if "WEBHOOK" in list(os.environ.keys()):
    
            executor.start_webhook(
                dispatcher=dp,
                webhook_path=config.WEBHOOK_PATH,
                on_startup=on_startup,
                on_shutdown=on_shutdown,
                skip_updates=True,
                host=WEBAPP_HOST,
                port=WEBAPP_PORT,
            )

        else:

            executor.start_polling(dp, on_startup=on_startup, skip_updates=False)